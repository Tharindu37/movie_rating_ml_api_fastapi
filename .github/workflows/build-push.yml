# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Build docker image for FastAPI
        run: docker build -t '${{secrets.DOCKER_USERNAME}}'/movie-ml-test:'${{github.sha}}' .

      - name: Logging to the Docker hub
        run: docker login --username '${{secrets.DOCKER_USERNAME}}' --password '${{secrets.DOCKER_PASSWORD}}'

      - name: Push the image to the docker hub
        run: docker push '${{secrets.DOCKER_USERNAME}}'/movie-ml-test:'${{github.sha}}'


      # Deploy Docker image to EC2
      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 Public IP
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}  # Private key for SSH access
          EC2_SSH_USER: ubuntu  # Change if using a different user
        run: |
          # Install dependencies on the runner
          sudo apt-get update
          sudo apt-get install -y openssh-client

          # Create a temporary SSH key file
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

          # SSH into EC2 and execute the deployment commands
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem $EC2_SSH_USER@${{ secrets.EC2_HOST }} << 'EOF'
            # Authenticate with Docker if necessary
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull the latest image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/movie-ml-test:${{ github.sha }}

            # Stop and remove the existing container (if any)
            docker stop movie-ml-test || true
            docker rm movie-ml-test || true

            # Run the Docker container
            docker run -d --name movie-ml-test -p 80:80 ${{ secrets.DOCKER_USERNAME }}/movie-ml-test:${{ github.sha }}
          EOF

          # Clean up the SSH key file
          rm -f ec2_key.pem
